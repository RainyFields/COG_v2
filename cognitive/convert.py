import numpy as np

class TaskInfoConvert(object):
    """Base class for frame_info"""

    def __init__(self, task_example):
        " task examples include family, epochs, question, objects, answers"
        " always init frame_info with a single task generated by one tree "
        " combining with a second task should be implemented incrementally"
        if task_example is None:
            raise ValueError("no tasks is provided")
        # initiate frame_info by given task_example
        self.frame_info = []
        self.task_info = [{}]
        self.task_info[0]["task_family"] = task_example["family"]
        self.task_info[0]["is_intact"] = False

        # todo: intactable flag matrix

        self.n_epochs = task_example["epochs"]
        self.task_info[0]["task_len"] = self.n_epochs
        for i in range(self.n_epochs):
            self.frame_info.append({})
            self.frame_info[i]["frame_index"] = i
            self.frame_info[i]["relative_tasks"] = [0] # refering to the first task in self.task_info
            self.frame_info[i]["relative_task_epoch_idx"] = []
            while len(self.frame_info[i]["relative_task_epoch_idx"]) != len(self.frame_info[i]["relative_tasks"]):
                self.frame_info[i]["relative_task_epoch_idx"].append([])
            self.frame_info[i]["relative_task_epoch_idx"][0] = [i] # referring to the ith epoch in task 0

            # iterate over task_example["objects"] and check epochs to determine whether that eq current i
            self.frame_info[i]["objs"] = []
            objs_count = 0
            for obj in task_example["objects"]:
                if obj["epochs"] != i:
                    break
                self.frame_info[i]["objs"].append({})
                for features in ["location", "shape", "color", "is_distractor"]:
                    self.frame_info[i]["objs"][objs_count][features] = obj[features]
                objs_count += 1

            self.frame_info[i]["objsets"] = [] # list of dicts; in each dicts: location, color, shape, is_distractor

            self.frame_info[i]["description"] = []
            if i == self.n_epochs - 1:
                self.frame_info[i]["action"] = task_example["answers"]
                self.frame_info[i]["description"].append(["ending of task %d" % 0])
            else:
                self.frame_info[i]["action"] = None
                if i == 0:
                    self.frame_info[i]["description"].append("start of task %d" % 0)

            self.frame_info[i]["is_sharable"] = False # todo: random assign (might need to follow predefined schedule)
            self.frame_info[i]["is_intact"] = False
            for index in self.frame_info[i]["relative_tasks"]:
                task = self.task_info[index]
                if task["is_intact"]:
                    self.frame_info[i]["is_intact"] = True
                    break

    def index_conv(self):
        pass
        # todo: for given frame index, return epoch index in each task

    def frame_update(self):
        pass
        # todo: insert/delete frames upon request

    def inv_convert(self):
        pass
        # todo: inverse the frameinfo to task examples


