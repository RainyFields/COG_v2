import numpy as np

class TaskInfoConvert(object):
    """Base class for frame_info"""

    def __init__(self, task_example):
        " task examples include family, epochs, question, objects, answers"
        " always init frame_info with a single task generated by one tree "
        " combining with a second task should be implemented incrementally"
        if task_example is None:
            raise ValueError("no tasks is provided")
        # initiate frame_info by given task_example
        self.frame_info = []
        self.task_info = [{}]
        self.task_info[0]["task_family"] = task_example["family"]
        self.task_info[0]["is_intact"] = False
        self.task_info[0]["question"] = task_example["question"]
        self.task_info[0]["answers"] = task_example["answers"]
        # todo: intactable flag matrix

        self.n_epochs = task_example["epochs"]
        self.task_info[0]["task_len"] = self.n_epochs
        for i in range(self.n_epochs):
            self.frame_info.append({})
            self.frame_info[i]["frame_index"] = i
            self.frame_info[i]["relative_tasks"] = [0] # refering to the first task in self.task_info
            self.frame_info[i]["relative_task_epoch_idx"] = []
            while len(self.frame_info[i]["relative_task_epoch_idx"])+1 != len(self.frame_info[i]["relative_tasks"]):
                self.frame_info[i]["relative_task_epoch_idx"].append([])
            self.frame_info[i]["relative_task_epoch_idx"][0] = i # referring to the ith epoch in task 0

            # iterate over task_example["objects"] and check epochs to determine whether that eq current i
            self.frame_info[i]["objs"] = []
            objs_count = 0
            for obj in task_example["objects"]:
                if obj["epochs"] != i:
                    break
                self.frame_info[i]["objs"].append({})
                for features in ["location", "shape", "color", "is_distractor"]:
                    self.frame_info[i]["objs"][objs_count][features] = obj[features]
                objs_count += 1

            # self.frame_info[i]["objsets"] = [] # list of dicts; in each dicts: location, color, shape, is_distractor

            self.frame_info[i]["description"] = []
            if i == self.n_epochs - 1:
                self.frame_info[i]["action"] = task_example["answers"]
                self.frame_info[i]["description"].append(["ending of task %d" % 0])
            else:
                self.frame_info[i]["action"] = None
                if i == 0:
                    self.frame_info[i]["description"].append("start of task %d" % 0)

            self.frame_info[i]["is_sharable"] = False # todo: random assign (might need to follow predefined schedule)
            self.frame_info[i]["is_intact"] = False
            for index in self.frame_info[i]["relative_tasks"]:
                task = self.task_info[index]
                if task["is_intact"]:
                    self.frame_info[i]["is_intact"] = True
                    break

    def __len__(self):
        # return number of tasks involved
        return len(self.task_info)

    def index_conv(self, frame_idx, task_idx):
        # return epoch index for given frame index and task index
        return self.frame_info[frame_idx]["relative_task_epoch_idx"][task_idx][0]

    def inv_convert(self):
        # inverse the frameinfo to task examples
        examples = []
        for i in range(len(self)):
            examples.append[{}]
            examples[i]["family"] = self.task_info[i]["task_family"]
            examples[i]["epochs"] = self.task_info[i]["task_len"]
            examples[i]["question"]= self.task_info[i]["question"]
            examples[i]["answers"] = self.task_info[i]["answers"]
            examples[i]["is_intact"] = self.task_info[i]["is_intact"]

            inv_frame_index = [] # frame index if involved in task i
            objects_feat = []
            objects = []
            curr_obj = {}
            for j, frame in enumerate(self.frame_info):
                if i in frame["relative_tasks"]:
                    count_i = frame["relative_tasks"].index(i)
                    inv_frame_index.append(j)
                    for obj in self.frame_info[j]["objs"]:
                        for features in ["location", "shape", "color", "is_distractor"]:
                            curr_obj[features] = obj[features]

                        if curr_obj not in objects_feat:
                            curr_obj["epochs"] = [self.frame_info[j]["relative_task_epoch_idx"][count_i]]
                            objects_feat.append(curr_obj)
                            objects.append(curr_obj)
                        else:
                            obj_idx = objects_feat.index(curr_obj)
                            objects[obj_idx]["epochs"].append(self.frame_info[j]["relative_task_epoch_idx"][count_i])
                examples[i]["objects"] = objects
        return examples

    def inv_convert_objset(self):
        # convert frame_info to objset
        pass

    def frame_update(self):
        pass
        # todo: insert/delete frames upon request




